开发中使用spring的主要技术
1 ioc容器管理各层组建
2 使用aop配置声明式事务
3 整合其他框架

aop和ioc概念
aop：aspect oriented program, 面向切面编程;Filter（过滤器）也是一种aop，aop是一种新的方法论，是对传统oop的补充，aop的主要编程对象是切面（aspect）而切面模块化横切关注点
ioc：invert of control 控制反转，也称为di（依赖注入），其思想是反转资源获取的方向。传统的资源查找方式要求组件向容器发起请求查找资源，作为回应，容器适时的返回资源。而应用ioc之后，则是容器主动的将资源推送给他所管理的组件，组件所要做的仅是选择一种合适的方式来接受资源，这种行为也被称为查找的被动形式

在spring中配置bean的方式
bean的配置方式：通过全类名（反射），通过工厂方法（静态工厂方法&实例工厂方法），FactoryBean

IOC容器对Bean的生命周期：
1 通过构造器或工厂方法创建bean实例
2 为bean的属性设置直和对其他bean的引用
3 将bean实例传递给bean后置处理器的postProcessBeforeInitialization方法
4 调用bean的初始化方法（init-method）
5 将bean实例传递给Bean后置处理器的postProcessAfterInitialization方法
6 bean可以使用了
8 当容器关闭时，调用bean的销毁方法（destroy-method）

Spring整合Struts2
整合Struts2，即由ioc容器管理struts2的Action：
1 安装spring插件：把struts2-spring-plugin-2.2.1.jar复制到当前web应用的 WEB-INF/lib目录下
2 在Spring的配置文件中配置struts2的action实例
3 在struts配置文件中配置action，但其class属性不再指向该action的实现类，而是指向spring容器中实例的id

spring整合hibenate
整合hibernate，及由ioc容器生成sessionFactory对象，并使用Spring的声明式事务
1 利用LocalSessionFactoryBean工厂Bean，声明一个使用xml映射文件的SessionFactory实例
2 利用HibernateTransactionManager配置Hibenate的事务管理器

Spring MVC 比较 Struts2
1 Spring MVC的入口是Servlet，而Stuts2是Filter
2 Spring MVC会稍微比Struts2快些，Spring MVC是给予方法设计的，而Struts2是基于类，每次发一次请求都会实例一个Action
3 Spring MVC使用更加简洁， 开发效率Spring MVC确实比Sturt2高：支持JSR303,处理Ajax的请求更方便
4 Stuts2的OGNL表达式使页面开发效率相比Spring MVC要高写

Spring MVC的运行流程
1 在整个Spring MVC 框架中，DispatcherServlet处于核心位置，负责协调和组织不同组件以完成请求处理并返回响应的工作
2 SpringMVC处理请求的过程：
    1）若一个请求匹配DispatcherServlet的请求映射路径（在web.xml中指定），web容器将该请求转交给DspatcherServlet处理
    2）DispatcherServlet接受到请求后，将根据请求信息（包括URL，HTTP方法，请求头，请求参数，Cookie等）及HandlerMapping的配置找到处理请求的处理器（Handler），可将HandlerMapping看成路由控制器，将Handler看成目标主机
    3）当DispatcherServlet根据HandlerMapping得到对应当前请求的Handler后，通过HandlerAdapter对Handler进行封装，再以统一的适配器接口调用Handler。
    4）处理器完成业务逻辑的处理后将返回一个ModelAndView给DispatcherServlet，ModelAndView包括了视图逻辑名和模型数据信息。
    5）DispatcherServlet借助ViewResoler完成逻辑视图名到真实视图对象的解析
    6）得到真实视图对象View后，DispatcherServlet使用这个View对ModelAndView中的模型数据进行视图渲染

Spring MVC常用的五个注解
@RequestMapping @PathVariable @RequestParam @RequestBody @RequestBoy 

使用SpringMVC完成JSON操作
1 配置MappingJacksonHttpMessageConverter
2 使用@RequestBody注解或ResponseEntity作为返回值

java线程同步五种方式：
1 synchronized同步方法
2 synchronized同步代码块
3 volatile告诉虚拟机自动优化实现线程同步
4 使用重入锁reentrantlock
private Lock lock = new ReentrantLock();
public void addMoney(int money){
    lock.lock();
    try{
        count += money;
        syso...
    }finally{
        lock.unlock();
    }
}
5 使用局部变量实现线程同步ThreadLocal
private static ThreadLocal<Integer> count = new ThreadLocal<Integer>(){
    @Override
    protected Integer initialValue(){
        return 0;
    }
};

ConcurrentHashMap原理
HashTable本身是线程安全的，写过Java程序的都知道通过加Synchronized关键字实现线程安全，这样对整张表加锁实现同步的一个缺陷就在于使程序的效率变得很低。这就是为什么Java中会在1.5后引入ConcurrentHashMap的原因。
ConcurrentHashMap主要有三大结构：整个Hash表，segment（段），HashEntry（节点）。每个segment就相当于一个HashTable。
ConcurrentHashMap的高并发性主要来自三个方面
1）使用分离锁实现多线程间的更深层次的共享访问
2）用HashEntery对象的不变性来降低执行读操作的线程在遍历链表期间对锁的需求
3）通过对同一个volatile变量的写/读访问，协调不同线程间读/写操作的内存可见性

核心线程数和最大线程数的区别：
当提交一个新任务到线程池时 首先线程池判断基本线程池(corePoolSize)是否已满？没满，创建一个工作线程来执行任务。满了，则进入下个流程； 其次线程池判断工作队列(workQueue)是否已满？没满，则将新提交的任务存储在工作队列里。满了，则进入下个流程； 最后线程池判断整个线程池(maximumPoolSize)是否已满？没满，则创建一个新的工作线程来执行任务，满了，则交给饱和策略来处理这个任务； 如果线程池中的线程数量大于 corePoolSize 时，如果某线程空闲时间超过 keepAliveTime，线程将被终止，直至线程池中的线程数目不大于 corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过 keepAliveTime，线程也会被终止。
核心线程数就像是工厂正式工，最大线程数，就是工厂临时工作量加大，请了一批临时工，临时工加正式工的和就是最大线程数，等这批任务结束后，临时工要辞退的，而正式工会留下。

springboot区分开发环境和生产环境部署（application.properties)
1).定义生产环境配置文件为 application-product.yml
server:
  port: 8081
spring:  
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/productDb
    username: root
    password: 123456  
2).定义开发环境配置文件为 application-dev.yml
server:
  port: 8080
spring:  
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/devlepmentDb
    username: root
    password: kf123  
3.配置文件application.yml中设置当前环境
spring:
  profiles:
    active: dev

volatile关键字详解
https://www.cnblogs.com/zhengbin/p/5654805.html

乐观锁与悲观锁
http://www.cnblogs.com/zhengbin/p/5657435.html

反射
为什么要用反射机制？直接创建对象不就可以了吗，这就涉及到了动态与静态的概念，静态编译：在编译时确定类型，绑定对象,即通过。动态编译：运行时确定类型，绑定对象。动态编译最大限度发挥了java的灵活性，体现了多态的应用，有以降低类之间的藕合性。反射机制的优点就是可以实现动态创建对象和编译，体现出很大的灵活性，特别是在J2EE的开发中，它的灵活性就表现的十分明显。比如，一个大型的软件，不可能一次就把把它设计的很完美，当这个程序编译后，发布了，当发现需要更新某些功能时，我们不可能要用户把以前的卸载，再重新安装新的版本，假如这样的话，这个软件肯定是没有多少人用的。采用静态的话，需要把整个程序重新编译一次才可以实现功能的更新，而采用反射机制的话，它就可以不用卸载，只需要在运行时才动态的创建和编译，就可以实现该能。 
它的缺点是对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于只直接执行相同的操作。

多线程单例
懒汉式：
    package org.mlinge.s03;  
      
    public class MySingleton {  
          
        private static MySingleton instance = null;  
          
        private MySingleton(){}  
          
        //public synchronized static MySingleton getInstance() {  
        public static MySingleton getInstance() {  
            try {   
                synchronized (MySingleton.class) {  
                    if(instance != null){//懒汉式   
                          
                    }else{  
                        //创建实例之前可能会有一些准备性的耗时工作   
                        Thread.sleep(300);  
                        instance = new MySingleton();  
                    }  
                }  
            } catch (InterruptedException e) {   
                e.printStackTrace();  
            }  
            return instance;  
        }  
    }  
双检查锁机制
public class MySingleton{
    //使用volatile关键字保证其可见性
    volatile private static MySingleton instance = null;
    private MySingleton(){

    }
    public static MySingleton getInstance(){
        try{
            if(instance != null){

            }else{
                //创建实例之前可能会有一些准备性的耗时工作
                Thread.sleep(300);
                synchronized(MySingleton.class){
                    if(instance == null){
                        //二次检查
                        instance = new MySingleton();
                    }
                }
            }

        }catch(InterruptedException e){
            e.printStackTrace();
        }
        return instance;
    }
}

数据查询量过大进行优化
索引
少用is null,is not null, in, not in等这样的匹配函数
少使用子查询
https://www.cnblogs.com/go-onxp/p/oracle.html

linkedlist是双向链表

hashmap的原理（先hashcode再equal）
http://blog.sina.com.cn/s/blog_59e0c16f0100xne7.html
http://blog.csdn.net/z55887/article/details/50596588

java中sleep和wait的区别
https://www.zhihu.com/question/23328075
首先，要记住这个差别，“sleep是Thread类的方法,wait是Object类中定义的方法”。尽管这两个方法都会影响线程的执行行为，但是本质上是有区别的。Thread.sleep不会导致锁行为的改变，如果当前线程是拥有锁的，那么Thread.sleep不会让线程释放锁。如果能够帮助你记忆的话，可以简单认为和锁相关的方法都定义在Object类中，因此调用Thread.sleep是不会影响锁的相关行为。Thread.sleep和Object.wait都会暂停当前的线程，对于CPU资源来说，不管是哪种方式暂停的线程，都表示它暂时不再需要CPU的执行时间。OS会将执行时间分配给其它线程。区别是，调用wait后，需要别的线程执行notify/notifyAll才能够重新获得CPU执行时间。线程的状态参考 Thread.State的定义。新创建的但是没有执行（还没有调用start())的线程处于“就绪”，或者说Thread.State.NEW状态。Thread.State.BLOCKED（阻塞）表示线程正在获取锁时，因为锁不能获取到而被迫暂停执行下面的指令，一直等到这个锁被别的线程释放。BLOCKED状态下线程，OS调度机制需要决定下一个能够获取锁的线程是哪个，这种情况下，就是产生锁的争用，无论如何这都是很耗时的操作。

线程池的原理与使用场景
https://www.cnblogs.com/sachen/p/7401959.html

mybatis的主键回填技术
http://blog.csdn.net/zyjzyj2/article/details/70174806

Dubbo中zookeeper做注册中心，如果注册中心集群挂掉了，发布者和订阅者之间还能通信
https://segmentfault.com/q/1010000006094521/a-1020000006097567
